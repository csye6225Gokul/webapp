name: CI/CD Workflow

on:
    push:
      branches:
        - main

jobs:
  packer-build:
    runs-on: ubuntu-latest


    services:
        mysql:
          image: mysql:5.7
          env:
            MYSQL_ROOT_PASSWORD: ${{ secrets.DB_PASSWORD }}  # Replace with actual password
            MYSQL_DATABASE: ${{ secrets.DB_NAME }}        # Replace with actual database name
          ports:
            - 3306:3306
          options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    env:
          MYSQL_HOST: 127.0.0.1
          MYSQL_PORT: 3306
          MYSQL_USER: ${{ secrets.DB_USER }} 
          MYSQL_PASSWORD: ${{ secrets.DB_PASSWORD }}  # Replace with actual password
          MYSQL_DATABASE: ${{ secrets.DB_NAME }} 

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2
    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14'

    - name: Install Dependencies
      run: npm install

    - name: Check MySQL Authentication
      run: mysql --host=${MYSQL_HOST} --port=${MYSQL_PORT} --user=${MYSQL_USER} --password=${MYSQL_PASSWORD} --execute='SHOW DATABASES;'
      env:
        MYSQL_HOST: 127.0.0.1
        MYSQL_PORT: 3306
        MYSQL_USER: ${{ secrets.DB_USER }} 
        MYSQL_PASSWORD: ${{ secrets.DB_PASSWORD }}       
    - name: Run Tests
      run: npm test

    - name: Setup Packer
      uses: hashicorp/setup-packer@main
      id: setup
      with: 
        version: "latest"

    - name: Zip Repository
      run: |
        zip -r webapp.zip . -x "*.git*"

    - name: Print Working Directory
      run: pwd
    
    - name: Upload Artifact
      uses: actions/upload-artifact@v2
      with:
        name: webapp
        path: webapp.zip

    
    - name: Packer init
      run: |
        #   export PACKER_GITHUB_API_TOKEN= ${{ secrets.PACKER_GITHUB_API_TOKEN }}
          packer init packer/packer.pkr.hcl
    
    - name: Download Artifact
      uses: actions/download-artifact@v2
      with:
        name: webapp
        path: artifacts
    
    - name: Validate Packer Template
      run: |
        packer fmt packer/packer.pkr.hcl
        packer validate packer/packer.pkr.hcl
    
    - name: Build AMI with Packer
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
        demo_account_id: ${{secrets.DEMO_ACCOUNT_ID}}
        dev_account_id: ${{secrets.DEV_ACCOUNT_ID}}
        # PACKER_AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
        # PACKER_AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
        db_root_password: ${{ secrets.DB_PASSWORD }}
        PACKER_DB_ROOT_PASSWORD: ${{ secrets.DB_PASSWORD }}
        aws_region: "us-east-1"  # Adjust as per your requirement
      run: |
        echo $aws_access_key
        echo $aws_secret_key
        echo $db_root_password
        packer build --var-file=packer/variables.pkrvars.hcl packer/packer.pkr.hcl
  
  deploy:
      name: deploy AMI
      runs-on: ubuntu-latest
      needs: packer-build 
      
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.DEMO_AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.DEMO_AWS_SECRET_KEY }}
        AWS_DEFAULT_REGION: us-east-1
      
      
      steps:
              - name: checkout
                uses: actions/checkout@v3
      
              - name: Setup Demo Environment
                run: |
                  export AWS_ACCESS_KEY_ID=${{secrets.DEMO_AWS_ACCESS_KEY_ID}}
                  export AWS_SECRET_ACCESS_KEY=${{secrets.DEMO_AWS_SECRET_KEY}}
      
              - name: Get Auto Scaling Group and Launch Template
                id: get_asg_and_lt
                run: |
                    LT_NAME_PREFIX="my-launch-template"
                  
                    LT_NAME=$(aws ec2 describe-launch-templates --query "LaunchTemplates[?starts_with(LaunchTemplateName, '${LT_NAME_PREFIX}')].LaunchTemplateName" --output text)
                  
                    if [ -z "$LT_NAME" ]; then
                      echo "No Launch Template found with the specified prefix."
                      exit 1
                    fi
                  
                    ASG_NAME=$(aws autoscaling describe-auto-scaling-groups --query "AutoScalingGroups[?contains(LaunchTemplate.LaunchTemplateName, '${LT_NAME}')].AutoScalingGroupName" --output text)
                  
                    if [ -z "$ASG_NAME" ]; then
                      echo "No Auto Scaling Group found using the Launch Template."
                      exit 1
                    fi
                
                    ASG_ID=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names $ASG_NAME --query 'AutoScalingGroups[0].AutoScalingGroupARN' --output text | cut -d':' -f 6)
                    LT_ID=$(aws ec2 describe-launch-templates --launch-template-names $LT_NAME --query 'LaunchTemplates[0].LaunchTemplateId' --output text)
                
                    echo "Auto Scaling Group Name: $ASG_NAME"
                    echo "Auto Scaling Group ID: $ASG_ID"
                    echo "Launch Template Name: $LT_NAME"
                    echo "Launch Template ID: $LT_ID"
      
                    AMI_ID=$(aws ec2 describe-images \
                    --executable-users ${{secrets.DEMO_ACCOUNT_ID}} \
                    --query 'Images | sort_by(@, &CreationDate) | [-1].ImageId' \
                    --filters "Name=name,Values=csye6225_Gokul*" \
                    )
       
                    aws ec2 create-launch-template-version --launch-template-id $LT_ID \
                    --version-description "Latest AMI version" \
                    --source-version 1 \
                    --launch-template-data "ImageId=$AMI_ID"
                  
                    echo "::set-output name=asg_name::$ASG_NAME"
                    echo "::set-output name=asg_id::$ASG_ID"
                    echo "::set-output name=lt_name::$LT_NAME"
                    echo "::set-output name=lt_id::$LT_ID"
      
      
      
              - name: Trigger Auto Scaling Group Instance Refresh with Latest Launch Template
                run: |
                      ASG_NAME="${{ steps.get_asg_and_lt.outputs.asg_name }}"

                      LT_NAME_PREFIX="my-launch-template"
                  
                      LT_NAME=$(aws ec2 describe-launch-templates --query "LaunchTemplates[?starts_with(LaunchTemplateName, '${LT_NAME_PREFIX}')].LaunchTemplateName" --output text)
                      
                      # Get the latest version of the Launch Template
                      LATEST_LT_VERSION=$(aws ec2 describe-launch-templates --launch-template-names ${LT_NAME} --query "LaunchTemplates[0].LatestVersionNumber" --output text)

                  
                      # Update the Auto Scaling Group with the latest Launch Template version
                      aws autoscaling update-auto-scaling-group \
                        --auto-scaling-group-name $ASG_NAME \
                        --launch-template "LaunchTemplateName=$LT_NAME,Version=$LATEST_LT_VERSION"
                  
                      # Trigger an instance refresh with the latest Launch Template as default
                      aws autoscaling start-instance-refresh --auto-scaling-group-name $ASG_NAME --strategy Rolling
                  
            
              
              - name: Wait for Auto Scaling Group Instance Refresh Completion
                run: |
                  ASG_NAME="${{ steps.get_asg_and_lt.outputs.asg_name }}"
                  REFRESH_STATUS=""
                  while [[ "$REFRESH_STATUS" != "Successful" && "$REFRESH_STATUS" != "Failed" ]]; do
                    REFRESH_STATUS=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name $ASG_NAME --query 'InstanceRefreshes[0].Status' --output text)
      
                    echo "Instance Refresh Status: $REFRESH_STATUS"
                    sleep 15
                  done
                    
                  # Check the instance refresh status and fail the workflow if it failed
                  if [[ "$REFRESH_STATUS" == "Failed" ]]; then
                    echo "Instance refresh failed. Workflow failed."
                    exit 1
                  if [[ "$REFRESH_STATUS" == "Cancelled" ]]; then
                    echo "Instance refresh failed. Workflow failed."
                    exit 1
                  else
                    echo "Instance refresh completed successfully."
                  fi

